/* eslint-disable @typescript-eslint/no-var-requires,no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

const { clientsClaim } = require("workbox-core");
const { precacheAndRoute, createHandlerBoundToURL } = require("workbox-precaching");
const { CacheableResponsePlugin } = require("workbox-cacheable-response/CacheableResponsePlugin");
const { ExpirationPlugin } = require("workbox-expiration/ExpirationPlugin");
const { registerRoute } = require("workbox-routing/registerRoute");
const { CacheFirst } = require("workbox-strategies/CacheFirst");
const { StaleWhileRevalidate } = require("workbox-strategies/StaleWhileRevalidate");

clientsClaim();

// Precache all the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST || []);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");

registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ request, url }) => {
        // If this isn't a navigation, skip.
        if (request.mode !== "navigate") {
            return false;
        } // If this is a URL that starts with /_, skip.

        if (url.pathname.startsWith("/_")) {
            return false;
        } // If this looks like a URL for a resource, because it contains // a file extension, skip.

        if (url.pathname.match(fileExtensionRegexp)) {
            return false;
        } // Return true to signal that we want to use the handler.

        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

registerRoute(
    /\.(?:png|gif|jpg|jpeg|webp|svg)$/,
    new CacheFirst({
        cacheName: "images",
        plugins: [
            new ExpirationPlugin({
                maxEntries: 60,
                maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
            }),
        ],
    })
);

const registerFontStyles = (match, name) => {
    registerRoute(
        match,
        new StaleWhileRevalidate({
            cacheName: name,
        })
    );
};

const registerFont = (match, name) => {
    registerRoute(
        match,
        new CacheFirst({
            cacheName: name,
            plugins: [
                new CacheableResponsePlugin({
                    statuses: [0, 200],
                }),
                new ExpirationPlugin({
                    maxAgeSeconds: 60 * 60 * 24 * 365,
                    maxEntries: 30,
                }),
            ],
        })
    );
};

registerFontStyles(/^https:\/\/fonts\.googleapis\.com/, "google-fonts-stylesheets");
registerFontStyles(/^https:\/\/rsms\.me\/.+\/.+\.css/, "rsms-stylesheet");

registerFont(/^https:\/\/fonts\.gstatic\.com/, "google-fonts-webfonts");
registerFont(/^https:\/\/rsms\.me\/.+\/font-files.+/, "rsms-webfonts");

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({ type: "SKIP_WAITING" })
self.addEventListener("message", (event) => {
    if (event.data && event.data.type === "SKIP_WAITING") {
        self.skipWaiting();
    }
});

// If registration and installation succeed
// ...
// self.addEventListener("activate", async () => {
//     const tabs = await self.clients.matchAll({ type: "window" });
//     tabs.forEach((tab) => {
//         tab.navigate(tab.url);
//     });
// });

// self.addEventListener("message", (event) => {
//     if (event.data === "update") {
//         self.skipWaiting();
//     }
// });
